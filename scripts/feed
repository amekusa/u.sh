#!/usr/bin/env bash

# === FEED.SH ===
# By Satoshi Soma (github.com/amekusa)

_version="2.1.0"

_pid=$$
_interrupted=false
_status=""
_error=""
_done=0
_workers=0

_help() {
	cat << EOF
=== FEED.SH v$_version ===
By Satoshi Soma (github.com/amekusa)

Usage:
  feed -f <file> -c <command>

Examples:
  feed -f urls.txt -c wget {item}
  feed -f urls.txt -c 'wget {item}'

Options:
  -h, --help        : Show this help.
  -f, --file        : File(s) to iterate over.
                      Each line in the file is treated as an "item",
                      and is passed to the command specified with '--cmd' option.
                      Lines that are empty or start with '#' are ignored.
  -c, --cmd         : Command to run for each item.
                      Upon running, every occurrence of '{item}' in the command
                      gets replaced with the current item.
  -s, --subst       : Placeholder string to be replaced in the command. (default: {item})
  -w, --write       : File to save failed items to.
                      The file can be passed to '--file' afterwards,
                      if you want to retry the failed items.
  -u, --update      : Save failed items to the same file as '--file'.
                      This option is a shortcut for like '-f items.txt -w items.txt'.
                      If '-f' was multiple, only the 1st file is chosen.
  -d, --dedupe      : Ignore duplicate lines.
  -p, --parallel    : Max number of processes to run in parallel. (default: 0)
  -r, --retry       : Max number of retries for a failed item. (default: 0)
  -ri, --r-interval : Interval for each retry. (default: 1s)
                      The format is the same as the one for '--interval'.
  -i, --interval    : Interval for each iteration. (default: 0s)
                      Format: 5s = 5 seconds
                              3m = 3 minutes
                              1h = 1 hour
                              1d = 24 hours
                              3-6m = random seconds between 3m and 6m

EOF
}

_die() {
	echo "[ERROR] $1"
	exit 1
}

_main() {
	if [ -z "$1" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
		_help; return 1
	fi

	local file=() # files to read
	local cmd="" # command to run
	local subst="{item}" # placeholder to be replaced with each item
	local write="" # file to write
	local update=false # whether to overwrite '--file'
	local dedupe=false # whether to ignore duplicate lines
	local parallel=0 # max processes to run in parallel
	local retry=0 # max retries
	local r_int=1 # retry interval
	local interval=0 # iteration interval

	# parsing args
	local ctx
	local err=false
	while [ $# -gt 0 ]; do
		case "$ctx" in
		cmd) # cmd context
			cmd="$cmd $1"
			;;
		*)
			case "$1" in
			-f|--file)
				ctx=file
				;;
			-c|--cmd)
				ctx=cmd
				;;
			-s|--subst)
				ctx=subst
				;;
			-w|--write)
				ctx=write
				;;
			-p|--parallel)
				ctx=parallel
				;;
			-r|--retry)
				ctx=retry
				;;
			-ri|--r-interval)
				ctx=r_int
				;;
			-i|--interval)
				ctx=interval
				;;
			-u|--update)
				update=true
				;;
			-d|--dedupe)
				dedupe=true
				;;
			-*)
				err=true
				;;
			*)
				case "$ctx" in
				# contextual args
				file)
					file+=("$1")
					;;
				subst)
					subst="$1"
					ctx=
					;;
				write)
					write="$1"
					ctx=
					;;
				parallel)
					parallel="$1"
					ctx=
					;;
				retry)
					retry="$1"
					ctx=
					;;
				r_int)
					r_int="$1"
					ctx=
					;;
				interval)
					interval="$1"
					ctx=
					;;
				*)
					err=true
					;;
				esac
				;;
			esac
			;;
		esac
		$err && _die "invalid argument: '$1'"
		shift
	done
	[ -z "$cmd" ] && _die "specify command to run"
	cmd="${cmd:1}"

	# prepare a tmp file for logging
	local tmp
	if [ -n "$write" ] || "$update"; then
		if "$update"; then
			[ -n "$write" ] && _die "'--write' and '--update' are mutually exclusive"
			write="${file[0]}"
		fi
		tmp="$(mktemp)" || _die "failed to create a temp file"
		cat <<- EOF > "$tmp"
		# Failed Items @ $(date +'%F %H:%M:%S')
		# command: $cmd

		EOF
	fi

	# for each file
	local total=0
	local f
	for f in "${file[@]}"; do

		# remove duplicate lines and save to tmp
		if "$dedupe"; then
			local _f
			_f="$(mktemp)" || _die "failed to create a temp file"
			awk '!seen[$0]++' "$f" > "$_f"
			f="$_f"
		fi

		# for each line
		local sleep=0
		local IFS line
		while IFS= read -r line; do
			# skip blank lines and comment lines
			if [ -z "$line" ] || [[ "$line" =~ ^[[:space:]]*# ]]; then
				continue
			fi

			((total++))

			# replace '{item}' in $cmd with $line
			local _cmd="${cmd//"$subst"/"$line"}"

			# handle ctrl+c
			if "$_interrupted"; then
				local now="$(date +'%F %H:%M:%S')"
				echo "$now [ABRT] $_cmd"
				if [ -n "$tmp" ]; then
					cat <<- EOF >> "$tmp"
					# $now, interrupted by user
					$line

					EOF
				fi
				continue
			fi

			# sleep for interval
			sleep "$sleep"

			# run the command
			((_workers++))
			if [ "$_workers" -le "$parallel" ]
				then _run "$_cmd" "$retry" "$r_int" "$line" "$tmp" &
				else _run "$_cmd" "$retry" "$r_int" "$line" "$tmp"
			fi

			# set interval
			sleep="$(_seconds "$interval")"
		done < "$f"
	done

	wait

	local fails="$((total - _done))"
	cat <<- EOF

	--- FINISHED ---
	 Total items: $total
	Failed items: $fails

	EOF

	# flush the tmp file
	if [ -n "$tmp" ]; then
		cp -f "$tmp" "$write" &&
		rm "$tmp"
	fi

	if [ "$fails" -gt 0 ] && [ -z "$_status" ]; then
		_error="$fails items failed"
		_status=1
	fi

	if [ -n "$_status" ]; then
		echo "[ERROR] $_error"
		return "$_status"
	fi
}

_run() {
	local cmd="$1"; shift
	local retry="$1"; shift
	local r_int="$1"; shift
	local line="$1"; shift
	local tmp="$1"; shift

	if out="$(eval "$cmd" 2>&1)"; then
		# success
		echo "$(date +'%F %H:%M:%S') [DONE] $cmd"
		kill -s USR1 $_pid # send USR1 signal to self (or parent)
	else
		# failure
		local code="$?"
		local now="$(date +'%F %H:%M:%S')"
		local err="${out//[$'\t\r\n']/ }" # replace line-breaks with spaces
		echo "$now [FAIL] $cmd (code:$code, err:$err)"

		if [ "$retry" -gt 0 ]; then
			sleep "$(_seconds "$r_int")"
			_run "$cmd" "$((retry - 1))" "$r_int" "$line" "$tmp"
			return
		fi

		if [ -n "$tmp" ]; then
			cat <<- EOF >> "$tmp"
			# $now, code:$code, err:$err
			$line

			EOF
		fi
		kill -s USR2 $_pid # send USR2 signal to self (or parent)
	fi
}

_seconds() {
	if [ -z "$1" ]; then
		echo 0
	elif [[ "$1" =~ ^([0-9]+)-([0-9]+)([^0-9]*)$ ]]; then
		local min="$(_seconds "${BASH_REMATCH[1]}${BASH_REMATCH[3]}")"
		local max="$(_seconds "${BASH_REMATCH[2]}${BASH_REMATCH[3]}")"
		echo "$(_random "$min" "$max")"
	elif [[ "$1" =~ ^([0-9]+)([^0-9]*)$ ]]; then
		local n="${BASH_REMATCH[1]}"
		case "${BASH_REMATCH[2]}" in
			m) ((n *= 60)) ;;
			h) ((n *= 3600)) ;;
			d) ((n *= 86400)) ;;
		esac
		echo "$n"
	else
		echo "$1"
	fi
}

_random() {
	local min="$1"
	local max="$2"
	echo "$((min + $RANDOM % (max - min)))"
}

# signal handler: INT
_on_SIGINT() {
	echo
	echo "Terminating..."
	_interrupted=true
	_error="interrupted by user"
	_status=2
	wait
}

# signal handler: USR1
_on_SIGUSR1() {
	((_done++))
	((_workers--))
	wait
}

# signal handler: USR2
_on_SIGUSR2() {
	((_workers--))
	wait
}

# set signal handlers
trap _on_SIGINT INT
trap _on_SIGUSR1 USR1
trap _on_SIGUSR2 USR2

_main "$@"

# FEED.SH
# (c) 2024 Satoshi Soma / amekusa.com

