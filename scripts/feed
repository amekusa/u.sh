#!/usr/bin/env bash

# === FEED.SH ===
# By Satoshi Soma (github.com/amekusa)

_version="2.2.1"

_pid=$$
_state=""
_interrupted=0
_status=""
_error=""
_done=0
_workers=0
_junk=()

_help() {
	cat << EOF
=== FEED.SH v$_version ===
By Satoshi Soma (github.com/amekusa)

Usage:
  feed -f <file> -c <command>

Examples:
  feed -f urls.txt -c wget {item}
  feed -f urls.txt -c 'wget {item}'

Options:
                -h, --help : Show this help.
        -f, --file <file+> : File(s) to iterate over.
                             Each line in the file is treated as an "item",
                             and is passed to the command specified with '--cmd' option.
                             Lines that are empty or start with '#' are ignored.
               -q, --queue : Run in "queue" mode.
           -c, --cmd <cmd> : Command to run for each item.
                             Upon running, every occurrence of '{item}' in the command
                             gets replaced with the current item.
         -s, --subst <any> : Placeholder string to be replaced in the command. (default: {item})
        -w, --write <file> : File to save failed items to.
                             The file can be passed to '--file' afterwards,
                             if you want to retry the failed items.
              -u, --update : Save failed items to the same file as '--file'.
                             This option is a shortcut for like '-f items.txt -w items.txt'.
                             If '-f' was multiple, only the 1st file is chosen.
              -d, --dedupe : Ignore duplicate lines.
      -p, --parallel <num> : Max number of processes to run in parallel. (default: 0)
         -r, --retry <num> : Max number of retries for a failed item. (default: 0)
  -ri, --r-interval <time> : Interval for each retry. (default: 1s)
                             The format is the same as the one for '--interval'.
     -i, --interval <time> : Interval for each iteration. (default: 0s)
                             Format: 5s = 5 seconds
                                     3m = 3 minutes
                                     1h = 1 hour
                                     1d = 24 hours
                                     3-6m = random seconds between 3m and 6m

EOF
}

_die() {
	echo "[ERROR] $1" >&2
	exit 1
}

_main() {
	if [ -z "$1" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
		_help; return 1
	fi

	local file=() # files to read
	local cmd="" # command to run
	local subst="{item}" # placeholder to be replaced with each item
	local write="" # file to write
	local update=false # whether to overwrite '--file'
	local dedupe=false # whether to ignore duplicate lines
	local queue=false # whether to run in queue mode
	local parallel=0 # max processes to run in parallel
	local retry=0 # max retries
	local r_int=1 # retry interval
	local interval=0 # iteration interval

	# parsing args
	local ctx
	while [ $# -gt 0 ]; do
		case "$ctx" in
		cmd) # cmd context
			cmd="$cmd $1"
			;;
		*)
			case "$1" in
			-f|--file)
				ctx=file
				;;
			-c|--cmd)
				ctx=cmd
				;;
			-s|--subst)
				ctx=subst
				;;
			-w|--write)
				ctx=write
				;;
			-p|--parallel)
				ctx=parallel
				;;
			-r|--retry)
				ctx=retry
				;;
			-ri|--r-interval)
				ctx=r_int
				;;
			-i|--interval)
				ctx=interval
				;;
			-u|--update)
				update=true
				;;
			-d|--dedupe)
				dedupe=true
				;;
			-q|--queue)
				queue=true
				;;
			-*)
				_die "invalid option: '$1'"
				;;
			*)
				case "$ctx" in
				# contextual args
				file)
					file+=("$1")
					;;
				subst)
					subst="$1"
					ctx=
					;;
				write)
					write="$1"
					ctx=
					;;
				parallel)
					parallel="$1"
					ctx=
					;;
				retry)
					retry="$1"
					ctx=
					;;
				r_int)
					_seconds "$1" &>/dev/null || _die "invalid time format for '--r-interval'"
					r_int="$1"
					ctx=
					;;
				interval)
					_seconds "$1" &>/dev/null || _die "invalid time format for '--interval'"
					interval="$1"
					ctx=
					;;
				*)
					_die "invalid argument: '$1'"
					;;
				esac
				;;
			esac
			;;
		esac
		shift
	done
	[ -z "$cmd" ] && _die "'--cmd' option is required"
	cmd="${cmd:1}"

	# prepare a tmp file for logging
	local tmp
	if [ -n "$write" ] || "$update"; then
		if "$update"; then
			[ -n "$write" ] && _die "'--write' and '--update' are mutually exclusive"
			write="${file[0]}"
		fi
		tmp="$(mktemp)" || _die "failed to create a temp file"
		_junk+=("$tmp")
		cat <<- EOF > "$tmp"
		# Failed Items @ $(date +'%F %H:%M:%S')
		# command: $cmd

		EOF
	fi

	local total=0
	local last=0
	_feed() {
		# skip blank lines and comment lines
		if [ -z "$1" ] || [[ "$1" =~ ^[[:space:]]*# ]]; then
			return 1
		fi

		((total++))

		# replace '{item}' in $cmd with $1
		local _cmd="${cmd//"$subst"/"$1"}"

		# handle ctrl+c
		if [ "$_interrupted" -gt 0 ]; then
			local now="$(date +'%F %H:%M:%S')"
			echo
			echo "# $now [ABRT] $_cmd"
			if [ -n "$tmp" ]; then
				cat <<- EOF >> "$tmp"
				# $now, interrupted by user
				$1

				EOF
			fi
			return 1
		fi

		# sleep for interval
		local sleep="$(($(_seconds "$interval") - ($(date +%s) - last)))" # interval - elapsed
		[ "$sleep" -gt 0 ] && sleep "$sleep"

		# run the command
		((_workers++))
		if [ "$_workers" -le "$parallel" ]
			then _run "$_cmd" "$retry" "$r_int" "$1" "$tmp" &
			else _run "$_cmd" "$retry" "$r_int" "$1" "$tmp"
		fi

		last="$(date +%s)"
	}

	# file mode
	if [ -n "$file" ]; then
		_state=FILE
		_interrupted=0

		# for each file
		local f
		for f in "${file[@]}"; do

			# remove duplicate lines and save to tmp
			if "$dedupe"; then
				local _f
				_f="$(mktemp)" || _die "failed to create a temp file"
				_junk+=("$_f")
				awk '!seen[$0]++' "$f" > "$_f" || _die "failed to dedupe: $f"
				f="$_f"
			fi

			# for each line
			local IFS line
			while IFS= read -r line; do
				_feed "$line"
			done < "$f"
		done
		_state=
	fi

	# queue mode
	if "$queue"; then
		_state=QUEUE
		_interrupted=0
		cat <<- EOF

		--- QUEUE MODE ---
		Enter '--quit' or '--exit' to exit.

		EOF
		local IFS line
		while IFS= read -r line; do
			case "$line" in
			--quit|--exit|\'--quit\'|\'--exit\')
				break
				;;
			*)
				_interrupted=0
				_feed "$line"
				;;
			esac
		done
		_state=
	fi

	wait

	local fails="$((total - _done))"
	cat <<- EOF

	--- FINISHED ---
	 Total items: $total
	Failed items: $fails

	EOF

	# flush the tmp file
	if [ -n "$tmp" ]; then
		cp -f "$tmp" "$write"
	fi

	if [ "$fails" -gt 0 ] && [ -z "$_status" ]; then
		_error="$fails items failed"
		_status=1
	fi

	if [ -n "$_status" ]; then
		echo "[ERROR] $_error" >&2
		return "$_status"
	fi
}

_run() {
	local cmd="$1"; shift
	local retry="$1"; shift
	local r_int="$1"; shift
	local line="$1"; shift
	local tmp="$1"; shift

	echo
	echo "# $(date +'%F %H:%M:%S') [EXEC] $cmd"

	if out="$(eval "$cmd" 2>&1)"; then
		# success
		echo
		echo "# $(date +'%F %H:%M:%S') [DONE] $cmd"
		kill -s USR1 $_pid # send USR1 signal to self (or parent)
	else
		# failure
		local code="$?"
		local now="$(date +'%F %H:%M:%S')"
		local err="${out//[$'\t\r\n']/ }" # replace line-breaks with spaces
		echo
		echo "# $now [FAIL] $cmd (code:$code, err:$err)"

		if [ "$retry" -gt 0 ]; then
			sleep "$(_seconds "$r_int")"
			_run "$cmd" "$((retry - 1))" "$r_int" "$line" "$tmp"
			return
		fi

		if [ -n "$tmp" ]; then
			cat <<- EOF >> "$tmp"
			# $now, code:$code, err:$err
			$line

			EOF
		fi
		kill -s USR2 $_pid # send USR2 signal to self (or parent)
	fi
}

_seconds() {
	if [ -z "$1" ]; then
		echo 0
	elif [[ "$1" =~ ^([0-9]+)-([0-9]+)([^0-9]*)$ ]]; then
		local min="$(_seconds "${BASH_REMATCH[1]}${BASH_REMATCH[3]}")"
		local max="$(_seconds "${BASH_REMATCH[2]}${BASH_REMATCH[3]}")"
		echo "$(_random "$min" "$max")"
	elif [[ "$1" =~ ^([0-9]+)([^0-9]*)$ ]]; then
		local n="${BASH_REMATCH[1]}"
		case "${BASH_REMATCH[2]}" in
			m) ((n *= 60)) ;;
			h) ((n *= 3600)) ;;
			d) ((n *= 86400)) ;;
		esac
		echo "$n"
	else
		echo 0
		return 1
	fi
}

_random() {
	local min="$1"
	local max="$2"
	echo "$((min + $RANDOM % (max - min)))"
}

_cleanup() {
	local f
	for f in "${_junk[@]}"; do
		[ -f "$f" ] && rm "$f"
	done
	pkill -P "$_pid"
}

# signal handler: INT
_on_SIGINT() {
	((_interrupted++))
	case "$_interrupted" in
	1)
		case "$_state" in
		FILE)
			cat <<- EOF

			Terminating...
			(Press CTRL+C again to force quit.)
			EOF
			_error="interrupted by user"
			_status=2
			;;
		QUEUE)
			cat <<- EOF

			Type '--quit' or '--exit' to exit.
			(Press CTRL+C again to force quit.)

			EOF
			;;
		*)
			exit 1
			;;
		esac
		;;
	*)
		exit 1
		;;
	esac
	wait
}

# signal handler: USR1
_on_SIGUSR1() {
	((_done++))
	((_workers--))
	wait
}

# signal handler: USR2
_on_SIGUSR2() {
	((_workers--))
	wait
}

# set signal handlers
trap _on_SIGINT INT
trap _on_SIGUSR1 USR1
trap _on_SIGUSR2 USR2
trap _cleanup EXIT

_main "$@"

# FEED.SH
# (c) 2024 Satoshi Soma / amekusa.com

